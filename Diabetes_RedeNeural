# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import SMOTE
import re

# Carregando os datasets (iguais do trabalho da √°rvore de classifica√ß√£o)
train = pd.read_csv('C:\\Users\\rafael.tieppo\\OneDrive - Pharmainox\\√Årea de Trabalho\\Diabetes_Redes_Neural\\train_diabetes.csv')
test  = pd.read_csv('C:\\Users\\rafael.tieppo\\OneDrive - Pharmainox\\√Årea de Trabalho\\Diabetes_Redes_Neural\\test_diabetes.csv')

# Substituir colunas com 0 por NaN e depois pela mediana
cols_com_zero = ['GLICOSE','PRESSAO_ARTERIAL','ESPESSURA_PELE','INSULINA','IMC']
for col in cols_com_zero:
    train[col].replace(0,np.nan,inplace=True)
    test[col].replace(0,np.nan,inplace=True)
    med = train[col].median()
    train[col].fillna(med,inplace=True)
    test[col].fillna(med,inplace=True)

# Separar features (X) e target (y)
X_train = train.drop(['ID_PACIENTE','NOME','RESULTADO'], axis=1)
y_train = train['RESULTADO']
X_test  = test .drop(['ID_PACIENTE','NOME','RESULTADO'], axis=1)
y_test  = test ['RESULTADO']

# Converter 'SEXO' para 0 ou 1
X_train['SEXO'] = X_train['SEXO'].map({'Feminino':0,'Masculino':1})
X_test ['SEXO'] = X_test ['SEXO'].map({'Feminino':0,'Masculino':1})

# Normalizar com StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled  = scaler.transform(X_test)

# Aplicar SMOTE para balancear as classes
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train_scaled, y_train)

#Criando a rede. Melhor configura√ß√£o que testei, atingiu 79.87% de acur√°cia
mlp = MLPClassifier(
     solver='adam',
     activation='relu',  # sigmoid
     hidden_layer_sizes=(200,200),  # 2 camadas ocultas
     random_state=42,
     #max_iter=1000,
     alpha=0.1,
     tol=1e-8,
     early_stopping=True,
 )

print("\nTreinando a Rede MLP...")
mlp.fit(X_train_res, y_train_res)

# Avalia√ß√£o
y_pred = mlp.predict(X_test_scaled)
print(f"\nAcur√°cia na base de teste: {accuracy_score(y_test, y_pred):.2%}")

# Sistema de predi√ß√£o de diabetes
print("\nSISTEMA DE PREDI√á√ÉO DE DIABETES")
print("\nDigite os dados do paciente:")
while True:
    try:
        print("\n" + "="*50)

        # Verificar se o dado digitado √© valido (somente letras e espa√ßos)
        while True:
            nome = input("Digite seu nome: ").strip()
            if re.fullmatch(r"[A-Za-z√Ä-√ø\s'-]+", nome):
                break
            print("‚õî Nome inv√°lido. Use apenas letras e espa√ßos.")

        # (feminino ou masculino f/m)
        while True:
            sexo_input = input("Sexo (Feminino/Masculino ou F/M): ").strip().lower()
            if sexo_input in ['f', 'feminino']:
                sexo_num = 0
                break
            elif sexo_input in ['m', 'masculino']:
                sexo_num = 1
                break
            else:
                print("‚õî Entrada inv√°lida. Digite 'Feminino' ou 'Masculino'.")

        # Fun√ß√£o para validar entradas num√©ricas (idade,glicose,press√£o_arterial,espessura_pele,insulina,imc)
        def ler_float(label, min_val=None, max_val=None):
            while True:
                try:
                    valor = float(input(f"{label}: "))
                    if (min_val is not None and valor < min_val) or (max_val is not None and valor > max_val):
                        print(f"‚õî Valor fora do intervalo permitido.")
                    else:
                        return valor
                except:
                    print("‚õî Entrada inv√°lida. Digite um n√∫mero.")

        idade = ler_float("Idade", 0)
        glic  = ler_float("Glicose", 1)
        press = ler_float("Press√£o arterial", 1)
        pele  = ler_float("Espessura da pele", 1)
        insu  = ler_float("Insulina", 1)
        imc   = ler_float("IMC", 1)

        paciente = np.array([[sexo_num, idade, imc, glic, press, pele, insu]])
        paciente_scaled = scaler.transform(paciente)

        prob = mlp.predict_proba(paciente_scaled)[0][1]
        pred = mlp.predict(paciente_scaled)[0]

        print("\n" + "="*50)
        print(f"\nRESULTADO DE: {nome}")
        print(f"PROBABILIDADE DE DIABETES: {prob:.2%}")
        print("üìã DIAGN√ìSTICO:", "‚ùå DIAB√âTICO" if pred == 1 else "‚úÖ N√ÉO DIAB√âTICO")
        print("="*50)

        if input("\nDeseja testar outro paciente? (s/n): ").lower() != 's':
            print("\nEncerrando sistema.")
            print("="*50)
            break

    except Exception as e:
        print(f"Erro: {e}. Tente novamente.")
